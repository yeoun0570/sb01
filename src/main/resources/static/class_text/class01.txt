1. 스프링 부트에서 웹 개발
    a. 컨트롤러나 화면을 개발하는 것은 유사하나 web.xml 등 웹 관련 설정 파일들이 없기 때문에 이를 대신하는 클래스를 작성해야 한다.

2. 컨트롤러와 Thymeleaf 만들기
    a. Thymeleaf 위치를 주의해야 한다.
        i. resources/templates 아래에 생성

3. JSON 데이터 만들기
    a. API 서버 구성
        i. 순수한 데이터만 구성하여 전송하는 방식
    b. @RestController 를 사용해야 한다.

4. Thymeleaf 기초 문법
    a. 스프링부트의 템플릿 엔진이름 타임리프
    b. 템플릿 형태이기 때문에 만들어진 결과에 데이터를 맞추어 보여주는 방식이다.
    c. Thymeleaf은 스프링의 JSP파일이 html 파일로 변경된거라고 보면 된다.
        i. <html xmlns:th="http://www.thymeleaf.org"> 네임스페이스 필요
    d. 제어문 형태 : th:if / th:unless / th:switch
    e. 인라인 처리
        i. 동일한 데이터를 다르게 처리하는 기능 (자바스크립트를 사용할 때 편리한 기능)
    f. 레이아웃기능
        i. <th:block> 레이아웃을 만들어 특정한 페이지에서 필요한 부분만을 작성하는 방식으로 개발이 가능 : 라이브러리가 필요함
        ii. implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:3.1.0'

5. JPA(Java Persistence API) 기술
    a. 자바로 영속 영역을 처리하는 API
    b. JPA의 상위 개념 ORM(Object Relational Mapping) 패러다임
        i. 객체지향으로 구성한 시스템을 관계형 데이터베이스에 매핑하는 패러다임
        ii. 즉, ORM 패러다임 기술이 JPA
    c. JPA는 스프링과 연동할 때 Spring Data JPA 라는 라이브러리를 사용한다.
        i. Spring Data JPA는 JPA를 단독으로 활용할 때 보다 더 적은 양의 코드로 많은 기능을 활용할 수 있다는 장점이 있다.

6. 프로그램 개발 목표
    a. 게시물 CRUD
        i. 목록화면 : '제목/내용/작성자'에 대해서 검색과 페이지 처리
            1. 검색조건에 따라서 다른 쿼리가 실행되도록 처리해야하는데 SpringDataJPA의 경우 Querydsl이나 jOOQ 등을 이용한다.
            2. 국내에서는 Querydsl을 많이 이용한다.
        ii. 등록화면 : '등록시간/수정시간'이 자동으로 처리될 수 있도록 기능을 추가, 등록이 완료되면 모달창으로 최종화면 보여주기
        iii. 조회화면 : 특정한 번호의 게시물을 조회하는데 이 때, '페이지/검색조건'을 그대로 유지하도록 구성
        iv. 조회화면 : 삭제, 수정 화면으로 이동하거나 목록화면으로 이동할 수 있다.
            1. 수정하고 나서는 다시 조회화면으로 간다.
            2. 삭제화면에서는 모달창이 나와 확인 후 삭제한다. 삭제 완료하면 목록화면으로 이동
    b. 게시물 페이징 처리/게시물 검색

7. JPA를 이용하는 이유와 사용법
    a. 객체지향을 통해서 영속 계층을 처리하는데 있다.
    b. JPA를 이용할 때는 테이블과 SQL 다루는 것이 아니다.
        i. 데이터에 해당하는 객체를 엔티티 객체라고 하고 그것을 다룬다.
        ii. 엔티티 객체를 데이터베이스와 연동해서 관리한다.
        iii. 그래서 쿼리문을 거의 작성하지 않고 어노테이션으로 관리한다.
    c. 엔티티 객체란?
        i. PK(기본키)를 가지는 자바의 객체
        ii. 엔티티 객체는 고유의 식별을 위해 @Id를 이용하여 객체를 구분하고 관리한다.
    d. JPARepository 인터페이스
        i. 자동으로 객체를 생성하고 생성된 객체를 통해서 예외처리도 자동으로 처리한다.
    e. JPA 기반 서비스의 시작은 엔티티클래스 작성부터
    f. @MappedSuperClass 를 이용한 공통 속성 처리
        i. BaseEntity 클래스 추가